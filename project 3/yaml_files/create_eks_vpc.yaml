  AWSTemplateFormatVersion: '2010-09-09'
  Description: 'Amazon EKS Sample VPC - Private and Public subnets'
  
  Parameters:
  
    VpcBlock:
      Type: String
      Default: 190.168.0.0/16
      Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
  
    PublicSubnet01Block:
      Type: String
      Default: 190.168.0.0/18
      Description: CidrBlock for public subnet 01 within the VPC
  
    PublicSubnet02Block:
      Type: String
      Default: 190.168.64.0/18
      Description: CidrBlock for public subnet 02 within the VPC
  
    PrivateSubnet01Block:
      Type: String
      Default: 190.168.128.0/18
      Description: CidrBlock for private subnet 01 within the VPC

    PrivateSubnet02Block:
      Type: String
      Default: 190.168.192.0/18
      Description: CidrBlock for private subnet 02 within the VPC

  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        -
          Label:
            default: "Worker Network Configuration"
          Parameters:
            - VpcBlock
            - PublicSubnet01Block
            - PublicSubnet02Block
            - PrivateSubnet01Block
            - PrivateSubnet02Block

  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock:  !Ref VpcBlock
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  
    IG:
      Type: "AWS::EC2::InternetGateway"
  
    VPCGateAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        InternetGatewayId: !Ref IG
        VpcId: !Ref VPC

    PubRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Pub Subnets
        - Key: Network
          Value: Public
  
    PubRoute:
      DependsOn: VPCGateAttachment
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PubRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref IG

    PubSubnet01:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 01
      Properties:
        MapPublicIpOnLaunch: true
        AvailabilityZone:
          Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
        CidrBlock:
          Ref: PublicSubnet01Block
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet01"
        - Key: kubernetes.io/role/elb
          Value: 1
  
    PubSubnet02:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 02
      Properties:
        MapPublicIpOnLaunch: true
        AvailabilityZone:
          Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
        CidrBlock:
          Ref: PublicSubnet02Block
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet02"
        - Key: kubernetes.io/role/elb
          Value: 1
  
    PrivSubnet01:
      Type: AWS::EC2::Subnet
      Metadata:
        Comment: Subnet 03
      Properties:
        MapPublicIpOnLaunch: true
        AvailabilityZone:
          Fn::Select:
          - '2'
          - Fn::GetAZs:
             Ref: AWS::Region
        CidrBlock:
          Ref: PrivateSubnet01Block
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet01"
        - Key: kubernetes.io/role/internal-elb
          Value: 1

    PrivSubnet02:
      Type: AWS::EC2::Subnet
      Metadata:
          Comment: Subnet 03
      Properties:
          MapPublicIpOnLaunch: true
          AvailabilityZone:
            Fn::Select:
            - '0'
            - Fn::GetAZs:
               Ref: AWS::Region
          CidrBlock:
            Ref: PrivateSubnet02Block
          VpcId:
            Ref: VPC
          Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-PrivateSubnet02"
          - Key: kubernetes.io/role/internal-elb
            Value: 1
          
    PubSubnet01RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PubSubnet01
        RouteTableId: !Ref PubRouteTable
  
    PubSubnet02RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PubSubnet02
        RouteTableId: !Ref PubRouteTable
  
    PrivSubnet01RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivSubnet01
        RouteTableId: !Ref PubRouteTable

    PrivateSubnet03RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivSubnet02
        RouteTableId: !Ref PubRouteTable
  
    PlaneSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Cluster communication with worker nodes
        VpcId: !Ref VPC
  
  Outputs:
  
    SubnetIds:
      Description: Subnets IDs in the VPC
      Value: !Join [ ",", [ !Ref PubSubnet01, !Ref PubSubnet02, !Ref PrivSubnet01, !Ref PrivSubnet02 ] ]
  
    SecurityGroups:
      Description: Security group for the cluster control plane communication with worker nodes
      Value: !Join [ ",", [ !Ref PlaneSecurityGroup ] ]
  
    VpcId:
      Description: The VPC Id
      Value: !Ref VPC
